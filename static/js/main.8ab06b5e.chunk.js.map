{"version":3,"sources":["components/Dashboard.js","App.js","index.js"],"names":["StyledButton","styled","Button","theme","color","borderColor","start","Date","citiesData","aqiDataTemp","colorsTemp","Dashboard","useState","setLoading","cities","setCities","aqiData","setAqiData","selectedCity","setSelectedCity","colors","setColors","setTime","getTime","zoomDomain","setZoomDomain","chart","useRef","handleMessage","event","JSON","parse","data","forEach","dataItem","aqi","parseFloat","toFixed","city","length","push","updated_at","value","now","aqiValue","category","getAqiIndex","useEffect","socket","WebSocket","onopen","onmessage","current","scrollIntoView","TableContainer","component","Paper","sx","maxWidth","width","margin","Table","minWidth","TableHead","TableRow","TableCell","TableBody","Object","keys","map","key","border","background","transition","scope","style","fontWeight","variant","onClick","s","Math","random","toString","slice","handleTrackClick","display","alignItems","justifyContent","ref","domainPadding","x","y","containerComponent","zoomDimension","onZoomDomainChange","domain","animate","duration","onLoad","stroke","flexDirection","index","cursor","splice","handleRemoveSelectedCity","App","className","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ab06b5e.chunk.js","sourcesContent":["import React, {useEffect, useState,useRef} from \"react\";\n\nimport {\n    Table,\n    TableBody,\n    TableCell,\n    TableContainer,\n    TableHead,\n    TableRow,\n    Paper,\n    useMediaQuery,\n    Button\n} from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport {VictoryChart,VictoryLine,VictoryTheme,VictoryZoomContainer,VictoryGroup} from \"victory\"\n\n\n\nconst StyledButton = styled(Button)(({theme})=>({\n    color: '#000',\n    borderColor:'#000'\n}))\n\nvar start=new Date();\nvar citiesData = {};\nvar aqiDataTemp = {};\nvar colorsTemp = {};\nconst Dashboard = () => {\n    const [loading, setLoading] = useState(true);\n    const [cities, setCities] = useState({});\n    const [aqiData, setAqiData] = useState({});\n    const [selectedCity, setSelectedCity] = useState([]);\n    const [chartData, setChartData] = useState([]);\n    const [anotherChartData,setAnotherChartData] = useState([]);\n    const [colors, setColors] = useState({});\n    const [zoomDomain, setZoomDomain] = useState([new Date(new Date().setTime(new Date().getTime() - 10)), new Date()]);\n    const chart = useRef(null);\n    const getAqiIndex = (aqiValue) => {\n        let category, color;\n        if (aqiValue >= 0 && aqiValue <= 50) {\n            category = \"Good\";\n            color = \"#55a84f\";\n        } else if (aqiValue > 50 && aqiValue <= 100) {\n            category = \"Satisfactory\";\n            color = \"#a2c853\";\n        } else if (aqiValue > 100 && aqiValue <= 200) {\n            category = \"Moderate\";\n            color = \"#fff832\";\n        } else if (aqiValue > 200 && aqiValue <= 300) {\n            category = \"Poor\";\n            color = \"#f39c32\";\n        } else if (aqiValue > 300 && aqiValue <= 400) {\n            category = \"Very Poor\";\n            color = \"#e93f33\";\n        } else {\n            category = \"Severe\";\n            color = \"#ae2d24\";\n        }\n        return {category: category, color: color}\n    }\n\n    const handleMessage = (event) => {\n        // Do nothing if event is triggered more than once in a second\n        if(((new Date()).getTime() - start.getTime()) > 1000){\n            let data = JSON.parse(event.data);\n            // console.log(Object.keys(cities));\n            data.forEach(dataItem => {\n                let aqi = parseFloat(dataItem.aqi.toFixed(2));\n                if (citiesData[dataItem.city] && citiesData[dataItem.city].length>0) {\n                    citiesData[dataItem.city].push({\n                        updated_at: new Date(),\n                        value:aqi\n                    })\n                }else{\n                    citiesData[dataItem.city] = [{\n                        updated_at: new Date(),\n                        value:aqi\n                    }]\n                }\n                aqiDataTemp[dataItem.city] = {\n                    aqi: aqi,\n                    updated_at: Date.now(),\n                    ...getAqiIndex(aqi)\n                }\n            })\n            setCities({...cities,...citiesData});\n            setAqiData({...aqiData,...aqiDataTemp});\n            start=new Date();\n        }\n    }\n    const handleZoom=(domain)=>{\n        setZoomDomain(domain.x)\n    }\n    useEffect(() => {\n        const socket = new WebSocket('ws://city-ws.herokuapp.com');\n        socket.onopen = () => {\n            setLoading(false);\n        };\n        socket.onmessage = handleMessage;\n    })\n    // useEffect(()=>{\n    //     console.log(\"qd\",Object.keys(cities));\n    // },[cities])\n    useEffect(()=>{\n        if(chart && chart.current){\n            chart.current.scrollIntoView();\n        }\n    },[selectedCity])\n    // useEffect(()=>{\n    //     if(selectedCity && chartData !== cities[selectedCity]){\n    //\n    //         console.log(\"sd\",cities[selectedCity])\n    //         if(!cities[selectedCity]){\n    //             console.log(cities,selectedCity)\n    //         }\n    //         setChartData([...cities[selectedCity]])\n    //     }\n    // },[selectedCity,cities])\n    // useEffect(()=>{\n    //     console.log(chartData);\n    // },[chartData])\n\n    const handleTrackClick = (key)=>{\n        let s = selectedCity\n        s.push(key);\n        colorsTemp[key] = '#'+(Math.random().toString(16)+'00000').slice(2,8);\n        setSelectedCity([...s]);\n        setColors({...colors,...colorsTemp});\n    }\n    const handleRemoveSelectedCity = (index)=>{\n        let s = selectedCity;\n        s.splice(index,1)\n        setSelectedCity([...s]);\n    }\n    return (\n        <div>\n            <TableContainer component={Paper} sx={{maxWidth:'960px',width:'95%',margin:'2rem auto'}}>\n                <Table sx={{minWidth: 650}} aria-label=\"simple table\">\n                    <TableHead>\n                        <TableRow>\n                            <TableCell>City</TableCell>\n                            <TableCell>AQI</TableCell>\n                            <TableCell>Actions</TableCell>\n                        </TableRow>\n                    </TableHead>\n                    <TableBody>\n                        {Object.keys(aqiData).map((key) => (\n                            <TableRow\n                                key={key}\n                                sx={{'&:last-child td, &:last-child th': {border: 0},background:aqiData[key].color,transition:'background 200ms ease-in-out'}}\n                            >\n                                <TableCell component={\"th\"} scope={\"row\"}>\n                                    {key}\n                                </TableCell>\n                                <TableCell>\n                                    <div style={{fontWeight:'bold'}}>\n                                        {aqiData[key].aqi}\n                                    </div>\n                                </TableCell>\n                                <TableCell>\n                                    <StyledButton variant={\"outlined\"} onClick={()=>handleTrackClick(key)}>Live Tracking</StyledButton>\n                                </TableCell>\n                            </TableRow>\n                        ))}\n                    </TableBody>\n                </Table>\n            </TableContainer>\n            {\n                selectedCity && selectedCity.length>0 &&\n                        <div style={{width:'960px', margin:'1rem auto 3rem auto',display:'flex',alignItems:'center',justifyContent:'center'}} ref={chart}>\n                            <div>\n                            <VictoryChart\n                                domainPadding={{x:0,y:10}}\n                                containerComponent={\n                                    <VictoryZoomContainer\n                                        zoomDimension=\"x\"\n                                        zoomDomain={zoomDomain}\n                                        onZoomDomainChange={handleZoom}\n                                    />\n                                }\n                            >\n                                <VictoryGroup>\n                                    {\n                                        selectedCity.map((x)=>(\n                                            <VictoryLine\n                                                animate={{\n                                                    duration: 500,\n                                                    onLoad: { duration: 500 }\n                                                }}\n                                                style={{data: {stroke: colors[x]}}}\n                                                data={cities[x]}\n                                                x={\"updated_at\"}\n                                                y={\"value\"}\n                                            />\n                                        ))\n                                    }\n                                </VictoryGroup>\n\n                            </VictoryChart>\n                            <br />\n                            <strong>Live AQI</strong>\n                            </div>\n                            <div style={{display:'flex',flexDirection:'column',alignItems:'start'}}>\n                                {\n                                    selectedCity.map((city,index)=>(\n                                        <strong style={{color:colors[city],margin:'0.25rem'}}>{city}<span style={{color:'red',cursor:'pointer'}} onClick={()=>handleRemoveSelectedCity(index)}>&nbsp;&nbsp;X&nbsp;&nbsp;</span></strong>\n                                    ))\n                                }\n                            </div>\n                        </div>\n            }\n        </div>\n    )\n}\nexport default Dashboard;","import './App.css';\nimport Dashboard from \"./components/Dashboard\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Dashboard />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}